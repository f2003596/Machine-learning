from numpy import exp,array,random,dot

class NeuralNetwork():
    
    def __init__(self):
        #Seeding the random number generator everytime the program runs
        random.seed(1)
        #We model a single neuron, with 3 input connections and 1 output connection.
        # We assign random weights to a 3 x 1 matrix, with values in the range -1 to 1
        # and mean 0.
        self.synaptic_weights = 2 * random.random((3, 1)) - 1#Range is from -1 to 1

    def __sigmoid(self,x):#Passing weighted sums into the Sigmoid function to normalize between 0 and 1
        return 1/(1+exp(-x))

    #Derivative of Sigmoid function
    #It indicates the confidence about the existing weights
    def __sigmoid_derivative(self,x):
        return x*(1-x)

    #Adjusting synaptic weights while training   
    def train(self,training_set_inputs,training_set_outputs,number_of_training_iterations):

        for iteration in range(number_of_training_iterations):

            output=self.think(training_set_inputs)  #Passing the input training set

            error=training_set_outputs-output#Predicting the error

            adjustment=dot(training_set_inputs.T,error*self.__sigmoid_derivative(output))#Adjusting the weights to make the curve more confident

            self.synaptic_weights+=adjustment#Adjusting the main synaptic weight

    def think(self,inputs):

        return self.__sigmoid(dot(inputs,self.synaptic_weights))        


if __name__=="__main__":

    neural_network=NeuralNetwork()#Starting a single layer neural network

    print("Random starting synaptic weights")
    print(neural_network.synaptic_weights)#Printing initial weights

    #Training input and output datasets
    training_set_inputs = array([[0, 0, 1], [1, 1, 1], [1, 0, 1], [0, 1, 1]])
    training_set_outputs = array([[0, 1, 1, 0]]).T

    #Training the datasets into the neural network with 10000 iterations
    neural_network.train(training_set_inputs,training_set_outputs,10000)

    #Printing new weights of the neural network model
    print("New synaptic weights after training")
    print(neural_network.synaptic_weights)

    #Testing neural network with users test case
    print("Output for [ 1,0,0] is ")
    print(neural_network.think(array([1,0,0])))
